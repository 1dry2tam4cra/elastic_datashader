--- a/__init__.py	2020-02-04 15:40:50.836948394 -0500
+++ b/__init__.py	2020-02-04 15:49:11.778178520 -0500
@@ -320,7 +320,7 @@
     return Image(img, coords=agg.coords, dims=agg.dims, name=name)
 
 
-def _colorize(agg, color_key, how, min_alpha, name):
+def _colorize(agg, color_key, how, span, min_alpha, name):
     if cupy and isinstance(agg.data, cupy.ndarray):
         from ._cuda_utils import interp
         array = cupy.array
@@ -352,13 +352,18 @@
         r = (data.dot(rs)/total).astype(np.uint8)
         g = (data.dot(gs)/total).astype(np.uint8)
         b = (data.dot(bs)/total).astype(np.uint8)
-    offset = total.min()
+    
     mask = np.isnan(total)
+    if span is None:
+        span = (np.nanmin(total).item(), np.nanmax(total).item())
+    offset = np.array(span, dtype=data.dtype)[0]
+
     if offset == 0:
         mask = mask | (total <= 0)
         offset = total[total > 0].min()
     a = _normalize_interpolate_how(how)(total - offset, mask)
-    a = interp(a, array([np.nanmin(a).item(), np.nanmax(a).item()]),
+    span = _normalize_interpolate_how(how)([0, span[1] - span[0]], 0)
+    a = interp(a, array(span),
                array([min_alpha, 255]), left=0, right=255).astype(np.uint8)
     r[mask] = g[mask] = b[mask] = 255
     values = np.dstack([r, g, b, a]).view(np.uint32).reshape(a.shape)
@@ -446,7 +451,7 @@
     if agg.ndim == 2:
         return _interpolate(agg, cmap, how, alpha, span, min_alpha, name)
     elif agg.ndim == 3:
-        return _colorize(agg, color_key, how, min_alpha, name)
+        return _colorize(agg, color_key, how, span, min_alpha, name)
     else:
         raise ValueError("agg must use 2D or 3D coordinates")
 
